// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // NOTE: sqlite does not work with NextAuth.js
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id             String          @id @default(cuid()) @map("_id")
  label          String
  permissions    String[]
  projectMembers ProjectMember[]
  project        Project?        @relation(fields: [projectId], references: [id])
  projectId      String?
}

model ProjectMember {
  id        String   @id @default(cuid()) @map("_id")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
}

model Project {
  id             String          @id @default(cuid()) @map("_id")
  name           String
  description    String?
  owner          String
  projectMembers ProjectMember[]
  roles          Role[]
}

model User {
  id             String          @id @default(cuid()) @map("_id")
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projectMembers ProjectMember[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
